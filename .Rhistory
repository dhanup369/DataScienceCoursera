makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setInverse <- function(inverse) inv <<- inverse
getInverse <- function() inv
list(set = set,
get = get,
setInverse = setInverse,
getInverse = getInverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getInverse()
if (!is.null(inv)) {
message("getting cached data")
return(inv)
}
mat <- x$get()
inv <- solve(mat, ...)
x$setInverse(inv)
inv
}
mymatrix<-makeCacheMatrix(matrix(1:9,3,3))
cacheSolve( mymatrix)
mymatrix$set(1:4,2)
mymatrix(1:4,2)
mymatrix(x=matrix(1:4,2))
mymatrix<-makeCacheMatrix(matrix(1:9,3,3))
mymatrix$get()
cacheSolve(mymatrix)
mymatrix$getInverse()
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setInverse <- function(solve) inv <<- solve
getInverse <- function() inv
list(set = set,
get = get,
setInverse = setInverse,
getInverse = getInverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getInverse()
if (!is.null(inv)) {
message("getting cached data")
return(inv)
}
mat <- x$get()
inv <- solve(mat, ...)
x$setInverse(inv)
inv
}
mymatrix<-makeCacheMatrix(matrix(1:9,3,3))
mymatrix$get()
cacheSolve(mymatrix)
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setInverse <- function(inv) im <<- inv
getInverse <- function() im
list(set = set,
get = get,
setInverse = setInverse,
getInverse = getInverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
im <- x$getInverse()
if (!is.null(im)) {
message("getting cached data")
return(im)
}
mat <- x$get()
i <- solve(mat, ...)
x$setInverse(i)
i
}
cacheSolve(mymatrix)
B <- matrix(c(1,2,3,4),2,2)
B1 <- makeCacheMatrix(B)
cacheSolve(B1)
makeCacheMatrix <- function(x = matrix()) {
im <- NULL
set <- function(y) {
x <<- y
im <<- NULL
}
get <- function() x
setInverse <- function(inv) im <<- inv
getInverse <- function() im
list(set = set,
get = get,
setInverse = setInverse,
getInverse = getInverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
im <- x$getInverse()
if (!is.null(im)) {
message("getting cached data")
return(im)
}
mat <- x$get()
i <- solve(mat, ...)
x$setInverse(i)
i
}
B <- matrix(c(1,2,3,4),2,2)
B1 <- makeCacheMatrix(B)
cacheSolve(B1)
B2 <- makeCacheMatrix(-B)
cacheSolve(B2)
makeCacheMatrix$get()
B1$get()
makeCacheMatrix <- function(x = matrix()) {
im <- NULL
set <- function(y) {
x <<- y
im <<- NULL
}
get <- function() x
setInverse <- function(inv) im <<- inv
getInverse <- function() im
list(set = set,
get = get,
setInverse = setInverse,
getInverse = getInverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
im <- x$getInverse()
if (!is.null(im)) {
message("getting cached data")
return(im)
}
mat <- x$get()
i <- solve(mat, ...)
x$setInverse(-i)
-i
}
mymatrix<-makeCacheMatrix(matrix(1:4,2,2))
mymatrix$get()
cacheSolve(mymatrix)
makeCacheMatrix <- function(x = matrix()) {
im <- NULL
set <- function(y) {
x <<- y
im <<- NULL
}
get <- function() x
setInverse <- function(inv) im <<- inv
getInverse <- function() im
list(set = set,
get = get,
setInverse = setInverse,
getInverse = getInverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
im <- x$getInverse()
if (!is.null(im)) {
message("getting cached data")
return(im)
}
mat <- x$get()
i <- solve(mat, ...)
x$setInverse(i)
i
}
mymatrix<-makeCacheMatrix(matrix(1:4,2,2))
cacheSolve(mymatrix)
makeCacheMatrix <- function(x = matrix()) {
invmat <- NULL
set <- function(y) {
x <<- y
invmat <<- NULL
}
get <- function() x
setInverse <- function(inv) invmat <<- inv
getInverse <- function() invmat
list(set = set,
get = get,
setInverse = setInverse,
getInverse = getInverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
invmat <- x$getInverse()
if (!is.null(invmat)) {
message("getting cached data")
return(invmat)
}
mat <- x$get()
i <- solve(mat, ...)
x$setInverse(i)
i
}
mymatrix<-makeCacheMatrix(matrix(1:4,2,2))
cacheSolve(mymatrix)
##These functions illustrates cashing of an inverse matrix
##of the given matrix and thus demonstrates the concept of lexical scoping.
##The function "makeCacheMatrix"builds a set of functions
##and returns the functions within a list to the parent environment.
makeCacheMatrix <- function(x = matrix()) {
invmat <- NULL
set <- function(y) {
x <<- y
invmat <<- NULL
}
get <- function() x
setInverse <- function(inv) invmat <<- inv
getInverse <- function() invmat
list(set = set,
get = get,
setInverse = setInverse,
getInverse = getInverse)
}
## cacheSolve() is required to populate or retrieve
##the inverse matrix from an object of type makeCacheMatrix()
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
invmat <- x$getInverse()
if (!is.null(invmat)) {
message("getting cached data")
return(invmat)
}
mat <- x$get()
i <- solve(mat, ...)
x$setInverse(i)
i
}
mymatrix<-makeCacheMatrix(matrix(1:4,2,2))
cacheSolve(mymatrix)
pwd
getwd()
setwd("~/Desktop/coursera")
set.seed(13435)
x<-data.frame("var1"=sample(1:5),"var2"=sample(6:10),"var3"=sample(11:15))
x<-x[sample(1:5),];x$var2[c(1,3)]=NA
x
set.seed(13435)
x<-data.frame("var1"=sample(1:5),"var2"=sample(6:10),"var3"=sample(11:15))
#x<-x[sample(1:5),];x$var2[c(1,3)]=NA
x
set.seed(13435)
x<-data.frame("var1"=sample(1:5),"var2"=sample(6:10),"var3"=sample(11:15))
x<-x$var2[c(1,3)]=NA
x
set.seed(13435)
x<-data.frame("var1"=sample(1:5),"var2"=sample(6:10),"var3"=sample(11:15))
x<-x[sample(1:5),];x$var2[c(1,3)]=NA
x
set.seed(13435)
x<-data.frame("var1"=sample(1:5),"var2"=sample(6:10),"var3"=sample(11:15))
x<-x[sample(1:5),];x$var2[c(1,3)]=NA
x[,1]
x[,"var1"]
x[1:2,"var2"]
x[(x$var1<3 and x$var1>11),]
x[(x$var1<3 & x$var1>11),]
x[(x$"var1"<3 & x$"var3">11),]
x[(x$"var1"<3 & x$"var3">11),]
x[(x$"var1"<=3 & x$"var3">11),]
x[(x$"var1"<=3 | x$"var3">11),]
x[(x$"var1"<=3 | x$"var3">15),]
x[which(x$var2>8),]
sort(x$var1)
sort(x$var1,decresing=TRUE)
sort(x$var1,decreasing=TRUE)
sort(x$var2,na.last=TRUE)
x[order(x$var1),]
x[order(x$var1,x$var3)]
x[order(x$var1,x$var3),]
x[order(x$var3),]
x[order(x$var3,x$var1),]
x[order(x$var1,x$var3),]
arrange(x,var1)
library(plyr)
arrange(x,var1)
arrange(x,desc(var1))
#Adding rows and columns
x$var4<-rnorm(5)
x
y
y<-cbind(x,rnorm(5))
y
cbind(x,rnorm(5))
x
x=cbind(x,rnorm(5))
x
x=cbind(rnorm(5),x)
x
x=cbind(rnorm(4),x)
x
x=rbind(rnorm(6))
x
x=rbind(x,rnorm(6))
x
x$var4<-rnorm(5)
x=cbind(x,rnorm(5))
x=cbind(rnorm(5),x)
x=rbind(x,rnorm(6))
x
x
x$var4<-rnorm(5)
x=cbind(x,rnorm(5))
x=cbind(rnorm(5),x)
x
file
myfile=download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv")
file=open(myfile)
file[1:4]
file
restdata=read.csv("restaurants.csv")
fileurl="https://data.baltimorecity.gov/api/views/kewm-hd3n/rows.csv?accessType=DOWNLOAD"
doenload.file(fileurl,destfile="restaurants.csv",method="curl")
restdata=read.csv("restaurants.csv")
getwd
getwd()
ls
fileurl="https://data.baltimorecity.gov/api/views/kewm-hd3n/rows.csv?accessType=DOWNLOAD"
doenload.file(fileurl,destfile="restaurants.csv",method="curl")
restdata=read.csv("restaurants.csv")
fileurl="https://data.baltimorecity.gov/api/views/kewm-hd3n/rows.csv?accessType=DOWNLOAD"
download.file(fileurl,destfile="restaurants.csv",method="curl")
restdata=read.csv("restaurants.csv")
restdata.head()
restdata.head(4)
restdata
head(restdata,n=3)
tail(restdata,n=4)
summary(restdata)
str(restdata)
quantile(restdata$councilDistrict,na.rm=TRUE)
quantile(restdata$councilDistrict,probs=c(0.5,0.75,0.9)
quantile(restdata$councilDistrict,probs=c(0.5,0.75,0.9))
fileurl="https://data.baltimorecity.gov/api/views/kewm-hd3n/rows.csv?accessType=DOWNLOAD"
download.file(fileurl,destfile="restaurants.csv",method="curl")
restdata=read.csv("restaurants.csv")
head(restdata,n=3)
tail(restdata,n=4)
summary(restdata)
str(restdata)#STructure of dataframe
quantile(restdata$councilDistrict,na.rm=TRUE)
quantile(restdata$councilDistrict,probs=c(0.5,0.75,0.9))
table(restdata$zipCode,useNA = "ifany")
table(restdata$councilDistrict,restdata$zipCode)
# check for missing values
sum(is.na(restdata$councilDistrict))
any(is.na(restdata$councilDistrict))
all(restdata$councilDistrict>0)
colSums(is.na(restdata))
all(colSums(is.na(restdata))==0)
table(restdata$zipCode %in% c("21211"))
table(restdata$zipCode %in% c("21211","21209"))
restdata[restdata$zipCode %in% c("21211","21209")]
restdata[restdata$zipCode %in% c("21211","21209"),]
summary(DF)
data(UCBAdmissions)
DF=as.data.frame(UCBAdmissions)
summary(DF)
xt
data(UCBAdmissions)
DF=as.data.frame(UCBAdmissions)
summary(DF)
xt=xtabs(Freq~Gender+Admit,data=DF)
xt
head(DF)
all(restdata$councilDistrict>0)
warpbreaks$replicate <-rep(1:9,len=54)
xt=xtabs(breaks~.,data=warpbreaks)
xt
ftable(xt)
fakeData=rnorm(le5)
object.size(fakeData)
fakeData=rnorm(1e5)
object.size(fakeData)
print(object.size(fakeData),units="Kb")
print(object.size(fakeData),units="Kb")
print(object.size(fakeData),units="b")
print(object.size(fakeData),units="Mb")
#Creating sequences
s1 <-seq(1,10,by=2)
s1
s2
s2<-seq(1,10,length=3)
s2
s1 <-seq(1,10,by=2)
s1
x<-c(1,3,8,25,100)
seq(x)
seq(along=x)
seq(x)
setwd("~/Desktop/DataScienceCoursera")
x[3]
x[1:4]
restdata$nearme=restdata$neighborhood %in% c("Woodberry")
table(restdata$nearme)
restdata$zipwrong=ifelse(restdata$zipCode <0,TRUE,FALSE)
table(restdata$zipwrong,restdata$zipCode <)
restdata$zipwrong=ifelse(restdata$zipCode <0,TRUE,FALSE)
table(restdata$zipwrong,restdata$zipCode <0)
restdata$zipgroups=cut(ratedata$zipcode,breaks=quantile(ratedata$zipcode))
restdata$zipgroups
restdata$zipgroups=cut(ratedata$zipcode,breaks=quantile(ratedata$zipcode))
table(restdata$zipgroups)
restdata$zipgroups=cut(restdata$zipcode,breaks=quantile(restdata$zipcode))
table(restdata$zipgroups)
restdata$zipgroups=cut(restdata$zipCode,breaks=quantile(restdata$zipCode))
table(restdata$zipgroups)
)
#Creating categorical variables
restdata$zipgroups=cut(restdata$zipCode,breaks=quantile(restdata$zipCode))
restdata$council=cut(restdata$councilDistrict,breaks=quantile(restdata$councilDistrict))
table(restdata$council)
table(restdata$council,restdata$councilDistrict)
install.packages("Hmisc")
library(Hmisc)
restdata$zipgroups=cut2(restdata$zipcode,g=4)
table(restdata$zipgroup)
library(Hmisc)
restdata$council=cut2(restdata$councilDistrict,g=4)
table(restdata$council)
library(Hmisc)
restdata$council=cut2(restdata$councilDistrict,g=2)
table(restdata$council)
library(Hmisc)
restdata$council=cut2(restdata$councilDistrict,g=1)
table(restdata$council)
library(Hmisc)
restdata$council=cut2(restdata$councilDistrict,g=2)
table(restdata$council)
restdata$zcf=factor(restdata$zipCode)
restdata$zcf[1:3]
restdata$zcf=factor(restdata$zipCode)
restdata$zcf[1:5]
class(restdata$zcf)
restdata$zcf=factor(restdata$zipCode)
restdata$zcf[1:10]
class(restdata$zcf)
table(restdata$zc)
yesno
yesno<-sample(c("yes","no"),size=10,replace=TRUE)
yesno
table(yesno)
yesno<-sample(c("yes","no"),size=10,replace=TRUE)
table(yesno)
yesnofac=<-factor(yesno,levels=c("yes","no"))
yesnofac<-factor(yesno,levels=c("yes","no"))
yesnofac
relevel(yesnofac,ref="yes")
relevel(yesnofac,ref="no")
table(re)
re<-relevel(yesnofac,ref="no")
table(re)
yesno<-sample(c("yes","no"),size=10,replace=TRUE)
table(yesno)
yesnofac<-factor(yesno,levels=c("yes","no"))
yesnofac
relevel(yesnofac,ref="no")
as.numeric(yesnofac)
yesno<-sample(c("yes","no"),size=10,replace=TRUE)
table(yesno)
yesnofac<-factor(yesno,levels=c("yes","no"))
yesnofac
relevel(yesnofac,ref="no")
as.numeric(yesnofac)
yesno<-sample(c("yes","no"),size=10,replace=TRUE)
table(yesno)
yesnofac<-factor(yesno,levels=c("yes","no"))
yesnofac
yesnofac<-relevel(yesnofac,ref="no")
as.numeric(yesnofac)
yesno<-sample(c("yes","no"),size=10,replace=TRUE)
table(yesno)
yesnofac<-factor(yesno,levels=c("yes","no"))
yesnofac
yesnofac<-relevel(yesnofac,ref="no")
yesnofac
as.numeric(yesnofac)
library (reshape2)
head(mtcars)
summary(mtcars)
describe(mtcars)
mtcars$carname<-rownames(mtcars)
carMelt<-melt(mtcars,id=c("carname","gear",'cyl '),measure.vars = "mpg","hp")
head(carMelt,n=5)
mtcars$carname<-rownames(mtcars)
carMelt<-melt(mtcars,id=c("carname","gear",'cyl'),measure.vars = "mpg","hp")
head(carMelt,n=5)
tail(carMelt,n=5)
tail(carMelt,n=3)
